1)call by value
#include<stdio.h>
void main()
{
int a,b;
clrscr();
scanf("%d %d",&a,&b);
c=addition(a,b);
}
int addition(int x,int y)
{
z=x+y;
return z;
getch();
}

2)call by reference
#include<stdio.h>
#include<conio.h>
void main()
{
int a=10,b=20;
clrscr();
swap(&a,&b);
printf("%d%d",a,b);
getch();
}
swap(int *a,int *b)
{
int t;
t=*a;
*a=*b;
*b=t;
printf("%d%d",*a,*b);
return;
}

3)
#include<stdio.h>
int main()
{
char str[10];
clrscr();
printf("main executed");
abc();

getch();
 return;
}
int abc()
{

printf("\nabc executed");
bbc();
return;
}
bbc()
{
printf("\nbbc executed");
return;
}


4)global,local,const,#defineand ternary 
#include<stdio.h>
#define hari 55
int a=10;
void main()
{
int const a=20;
int c=2;

clrscr();
printf("%d",a);
printf("\n%d",hari);
printf("\n%d",(c==2)? 10:30);
printf("\n%d",c);
sample( a);
getch();
}
sample(int  x)
{
x=30;
printf("\n%d",x);
return;
}

5)factorial using recursion
#include<stdio.h>  
int factorial (int n)    
{    
    if ( n < 0)    
        return -1; 
    if (n == 0)    
        return 1; 
    return (n * factorial (n -1));    
}   
int main(){  
    int a;
int fact=0; 
scanf("%d",&a);
fact=factorial(a);

printf("\n factorial of %d is: %d",a,fact);
return 0;  
}   

6)reading from file 
#include<stdio.h>  
#include<conio.h>  
void main(){  
FILE *fp;  
char c;  
clrscr();  
fp=fopen("file.txt","r"); 

  
while((c=fgetc(fp))!=EOF){  
printf("%c",c);  
}  
  
rewind(fp);  
  
while((c=fgetc(fp))!=EOF){  
printf("%c",c);  
}  
  
fclose(fp);    
getch();    
}

7) error handling
#include<stdio.h>
#include<conio.h>
#include<errno.h>
void main()
{

FILE *fp;
clrscr();
fp=fopen("hari.txt","w");
fprintf(fp,"this is sample file");
fputs("\nthis is testing",fp);
printf("erdror code is: %d",errno);
printf("\nerror message :%s",strerror(errno));
perror("\n");
fclose(fpd);
getch();
}

8)pointers 
#include <stdio.h>

int main () {

   int  var = 20;   
   int  *ip;       

   ip = &var;  

   printf("Address of var variable: %x\n", &var  );

   
   printf("Address stored in ip variable: %x\n", ip );

   
   printf("Value of *ip variable: %d\n", *ip );

   return 0;
}

9)enum 
#include<stdio.h>
enum state {a  = 0, b,c};
enum state currstate = 2;
enum state findstate(){
return currstate;
}
int main()
{
clrscr();
(findstate() == a)?printf("working"):printf("not working");
return 0;
}

10)enum
#include <stdio.h>
enum day {sunday = 1, monday=2, tuesday = 3,
          wednesday, thursday = 5, friday, saturday};
 
int main()
{
    printf("%d %d %d %d %d %d %d", sunday, monday, tuesday,
            wednesday, thursday, friday, saturday);
    return 0;
}

11)finding the minimum number
#include<stdio.h>  
int minarray(int arr[],int size){    
int min=arr[0];    
int i=0;    
for(i=1;i<size;i++){    
if(min>arr[i]){    
min=arr[i];    
}    
}  
return min;    
}
    
int main(){      
int i=0,min=0;    
int numbers[]={4,5,7,3,8,9};   
  
min=minarray(numbers,6);   
printf("minimum number is %d \n",min);    
return 0;  
}    

12)command line arguments
#include <stdio.h>


int main(int arga,char *argb[])
{
    int i;
    if( arga>= 2 )
    {
        printf("The arguments supplied are:\n");
        for(i = 1; i < arga;i++)
        {
            printf("%s\t", argb[i]);
        }
    }
    else
    {
        printf("argument list is empty.\n");
    }
    return 0;
}
