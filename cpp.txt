1)user defined function
#include <iostream>

using namespace std;

class employee {
    public:
    int id;
    string name;
    float salary;
    
    void insert(int i,string n,float s)
   {
     id = i;
     name = n;
     salary = s;
   }
 void display()
 {
     cout<<id<<" "<<name<<" "<<salary<<endl;
 }
};


int main(void)
{
    employee e1;
    employee e2;
    e1.insert(201,"king",990000);
    e2.insert(202,"kumar",333000);
    e1.display();
    e2.display();
    return 0;
}

2)constructor with and without parameter
#include <iostream>

using namespace std;

class employee {
    public:
    int id;

    float salary;
    employee()
    {
        cout<<"without parameter"<<endl;
    }
    
    employee(int i,float s)
   {
     id = i;
     
     salary = s;
     cout<<"with parameter"<<endl;
     cout<<id<<" "<<salary<<endl;
   }

};


int main(void)
{
    employee e1;
    employee e2=employee(123,233);
    
   
    return 0;
}

3)inheritance concept
#include <iostream>

using namespace std;

class parent {
    public:
    int id=10;

    float salary=20;
    void display()
    {
        cout<<"parent class"<<endl;
    }
};

    class base:public parent
    
   {
       public:
       void get(){
           
     int k=30;
     cout<<"with parameter"<<endl;
     cout<<id<<" "<<salary<<" "<<k<<endl;
   }
   };




int main(void)
{
    parent ob1;
    base ob;
    ob1.display();
    ob.get();
   
    return 0;
}

4)
#include <iostream>

using namespace std;

class base {
    public:
    void display()
    {
        cout<<"this is base class";
    }
};
class child:public base
{
    public:
    void display()
    {
        cout<<"this is child class";
    }
};
int main()
{
    child ob;
    ob.display();
    return 0;
}
   
5)
#include <iostream>

using namespace std;

class base {
    public:
    void display()
    {
        cout<<"this is base class";
    }
};
class child:public base
{
    private:
    void display()
    {
        cout<<"this is child class";
    }
};
int main()
{
    child ob;
    ob.display();
    return 0;
}

6)multilevel inheritance
#include <iostream>

using namespace std;

class base {
    public:
    void display1()
    {
        cout<<"this is base class";
    }
};
class child:public base
{
    public:
    void display2()
    {
        cout<<"this is child class";
    }
};
class child2:public child
{
    void display3()
    {
    cout<<"this is sub child class";
    
}
};
int main()
{
    child2 ob;
    ob.display1();
    return 0;
}

7)multiple inheritance
#include <iostream>

using namespace std;

class base {
    public:
    void display()
    {
        cout<<"this is base class";
    }
};
class child
{
    public:
    void display()
    {
        cout<<"this is child class";
    }
};
class child2:public base,public child
{
    
};
int main()
{
    child2 ob;
    ob.display();
    return 0;
}
      
8)hierarchial inheritance
#include <iostream>

using namespace std;

class base {
    public:
    void display()
    {
        cout<<"this is base class";
    }
};
class child:public base
{
    public:
    void display()
    {
        cout<<"this is child class";
    }
};
class child2:public base
{
    void display()
    {
    cout<<"this is sub child class";
    
}
};
int main()
{
    child2 ob;
    ob.display();
    return 0;
}
 
9)hybrid inheritance
 #include <iostream>

using namespace std;

class a {
    public:
    void display()
    {
        cout<<"this is base class";
    }
};
class b:public a
{
    public:
    void display()
    {
        cout<<"this is child class";
    }
};
class c:public a
{
    void display()
   {
   cout<<"this is sub child class";
    
}
};
class d:public b,public c
{
    
};
int main()
{
    d ob;
    ob.display();
    return 0;
}  